// 4387555	2018-11-16 16:30:34	Accepted	4033	C++	680	540	呆滞的慢板

/**
 * 构造题
 *
 * 这题应该用一种巧妙的构造法
 * 很明显，只要总和 n*(n+1)/2 为奇数，那就没戏直接出 -1
 * 否则的话，除了 2 个肯定不行（所以 n=2 也直接出 -1），其他都是有办法构造的。
 * 如果是偶数个，明显只需要镜像对应分配即可。
 * 为了简化问题，我们定义 1-3 为 A 组，2-4 为 B 组，我们可以不管男女，只需要把所有人归类到 A/B 组里面就可以了。
 *
 * 简单可证：
 * 在 n*(n+1)/2 为偶数的前提下（其他已被排除）：
 * 1. 如果 n 为偶数，则 n 必定被 4 整除
 * 2. 如果 n 为奇数，则 n+1 必定被 4 整除，即 n-3 必定被 4 整除
 *
 * 如果是上述第一种（n%2==0）的情况：
 * 例如：说 1 2 3 4 5 6 7 8 这么多个，我们可以简单镜像安排
 *          A B A B B A B A 这样就肯定可以
 *
 * 如果是第二种，奇数个的情况：
 * 我们可以把前三个安排为 AAB，剩下的必然能被 4 整除，就归约成第一种镜像安排即可解决。
 *
 * 因此，具体排列方案可以完全按照 n 生成，时间和空间复杂度都可以做到 O(1)。
 * 为了程序简便就没有苛求空间复杂度了。
 */

#include <string>
#include <iostream>
using namespace std;

typedef long long i64;

int main() {
    int t, n;
    i64 a, b;
    string s;
    for (cin >> t; t--;) {
        cin >> n >> s;
        if ((n * (n + 1)) % 4 != 0) {
            cout << "-1" << endl;
            continue;
        }
        for (int i = 0; i < n; ++i) {
            if (n % 2) {
                // 奇数，前三个排好之后归约成偶数
                // 前一个是男女因子，后两个是左右因子
                cout << (s[i] == '0' ? 1 : 3) + (i < 2 ? 0 : i == 2 ? 1 : i - 3 < (n - 3) / 2 ? i % 2 : 1 - i % 2);
            } else {
                // 偶数，直接排
                // 前一个是男女因子，后两个是左右因子
                cout << (s[i] == '0' ? 1 : 3) + (i < n / 2 ? i % 2 : 1 - i % 2);
            }
        }
        cout << endl;
    }
    return 0;
}
